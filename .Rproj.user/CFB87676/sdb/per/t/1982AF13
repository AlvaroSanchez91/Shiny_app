{
    "collab_server" : "",
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nlibrary(shiny)\n\nshinyServer(function(input, output) {\n  \n#################### Datos\n    output$OUTdatos=DT::renderDataTable(creditos, filter='top')\n\n#################### Panel mapa\n    output$map=leaflet::renderLeaflet(\n      leaflet()%>%\n        addTiles()%>%\n        setView(lng=-5.98815,lat=37.35945,zoom=18)\n      \n    )\n#################### panel bidimensional:\n    datos_bid=reactive({\n      data.frame(\n        varX = creditos[,input$SelVariable01],\n        varY = creditos[,input$SelVariable02],\n        Agru = creditos[,input$SelVariable03]\n      )\n    })\n    \n#################### panel dispersion:\n    output$OUTdispersion=plotly::renderPlotly({\n      df_dispersion = datos_bid()\n      plotly::plot_ly(df_dispersion,x=~varX,y=~varY)\n    })\n#################### panel dispersion cat:\n    output$OUTdispersioncat=plotly::renderPlotly({\n      df_dispersion = datos_bid()\n      plotly::plot_ly(df_dispersion,x=~varX,y=~varY, color = ~Agru)\n    })\n#################### panel reg lineal:\n    output$OUTReglineal=plotly::renderPlotly({\n      df_dispersion=datos_bid()\n      \n      if (input$regresionMultible){\n        p <- ggplot(data = df_dispersion, aes_string(x =colnames(df_dispersion)[1], y =  colnames(df_dispersion)[2],col = colnames(df_dispersion)[3])) +\n          geom_point() + geom_smooth()\n      }\n      else{\n        p <- ggplot(data = df_dispersion, aes_string(x =colnames(df_dispersion)[1], y =  colnames(df_dispersion)[2])) +\n         geom_point(aes_string(col =  colnames(df_dispersion)[3])) + geom_smooth()\n      }\n      plotly::ggplotly(p)\n      \n      \n    })\n    \n######################################################## Prediccion\n \n############################# predecir   \n    datos_pred=reactive({\n      inFile= input$file1\n      \n      dat=data.frame(\n        read.csv(inFile$datapath)\n      )\n      rownames(dat)=dat$X\n      dat$pred_ingresos=predict(model,dat)\n      dat\n    })\n\n########################################### descargar   \n    output$downloadPred <- downloadHandler(\n      filename = \"predicciones.csv\",\n      content = function(file) {\n        write.csv(datos_pred(), file)\n      }\n    )\n############################################### tabla    \n    output$TablaLeida = DT::renderDataTable({\n      \n      \n      predicciones=datos_pred()\n      predicciones[c('X','pred_ingresos')]\n      \n    }, filter='top',height = \"50%\")\n    \n######################################################## Resumen\n    output$summary = renderPrint (\n      summary(model)\n      #model$coefficients\n      \n                                    )\n    \n    \n  ######################################################################## Unidim\n    output$diagbarras = renderPlot( plot(creditos[input$SelVariable02Uni]))\n    \n    output$densidad <- renderPlot({\n      var=input$SelVariable01Uni\n      var2=input$SelVariable02Uni\n      \n      #plot(iris[c(var1,var2)],col=iris$Species)\n      if (input$regresionMultible2){\n      ggplot(creditos,aes_string(var,fill=var2))+geom_density(alpha=0.5)}\n      else{ggplot(creditos,aes_string(var))+geom_density(alpha=0.5,fill='blue')}\n      \n    })\n    \n    output$summaryCat = renderPrint (\n      summary(creditos[input$SelVariable02Uni])\n      )\n    output$summaryNum = renderPrint (\n      summary(creditos[input$SelVariable01Uni])\n    )\n    \n\n})\n",
    "created" : 1500886969949.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "170118281",
    "id" : "1982AF13",
    "lastKnownWriteTime" : 1500829291,
    "last_content_update" : 1500829291,
    "path" : "C:/Users/AlvaroSanchez91/Desktop/Master Big Data Sevilla/DS&BI Data Science & Business Intelligence/Segundo profe (R shiny)/ej_shiny/shiny/sanchezcastanneda/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}